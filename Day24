import java.util.*;

class Solution {
    public int minCostConnectPoints(int[][] points) {
        int n = points.length;
        List<Edge> edges = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int distance = Math.abs(points[i][0] - points[j][0]) + Math.abs(points[i][1] - points[j][1]);
                edges.add(new Edge(i, j, distance));
            }
        }

        // Sort the edges by their weights in ascending order.
        Collections.sort(edges, (a, b) -> a.distance - b.distance);

        int minCost = 0;
        UnionFind uf = new UnionFind(n);

        // Apply Kruskal's algorithm to find the minimum spanning tree.
        for (Edge edge : edges) {
            int u = edge.u;
            int v = edge.v;
            int distance = edge.distance;

            if (!uf.isConnected(u, v)) {
                uf.union(u, v);
                minCost += distance;
            }
        }

        return minCost;
    }

    // Definition of an edge class.
    class Edge {
        int u;
        int v;
        int distance;

        public Edge(int u, int v, int distance) {
            this.u = u;
            this.v = v;
            this.distance = distance;
        }
    }

    // Definition of a union-find (disjoint set) data structure.
    class UnionFind {
        int[] parent;

        public UnionFind(int n) {
            parent = new int[n];
            for (int i = 0; i < n; i++) {
                parent[i] = i;
            }
        }

        public int find(int x) {
            if (parent[x] != x) {
                parent[x] = find(parent[x]);
            }
            return parent[x];
        }

        public void union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);
            if (rootX != rootY) {
                parent[rootX] = rootY;
            }
        }

        public boolean isConnected(int x, int y) {
            return find(x) == find(y);
        }
    }
}
