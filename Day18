class Solution {
    public int maximumRequests(int n, int[][] requests) {
        int numRequests = requests.length;
        int maxAchievable = 0;
        for (int i = 0; i < (1 << numRequests); i++) {
            int[] balance = new int[n];
            int numTransfers = 0;
        
            for (int j = 0; j < numRequests; j++) {
                if (((i >> j) & 1) == 1) {
                    int from = requests[j][0];
                    int to = requests[j][1];
                    balance[from]--;
                    balance[to]++;
                    numTransfers++;
                }
            }
            boolean isBalanceZero = true;
            for (int k = 0; k < n; k++) {
                if (balance[k] != 0) {
                    isBalanceZero = false;
                    break;
                }
            }
            if (isBalanceZero) {
                maxAchievable = Math.max(maxAchievable, numTransfers);
            }
        }
        
        return maxAchievable;
    }
}
